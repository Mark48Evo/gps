{"version":3,"file":"gps.js","sources":["../src/index.js"],"sourcesContent":["import Debug from 'debug';\nimport amqplib from 'amqplib';\nimport SerialPort from 'serialport';\nimport { createClient } from 'redis';\nimport UsbSerialPortDeviceLister from '@mark48evo/usb-serialport-device-lister';\nimport UBXProtocolParser from '@mark48evo/ubx-protocol-parser';\nimport UBXPacketParser from '@mark48evo/ubx-packet-parser';\nimport SystemEvents from '@mark48evo/system-events';\nimport SystemState from '@mark48evo/system-state';\nimport SystemGPS from '@mark48evo/system-gps';\n\nasync function main() {\n  const debug = Debug('gps');\n\n  const config = {\n    rabbitmqHost: process.env.RABBITMQ_HOST || 'amqp://localhost',\n    redisURL: process.env.REDIS_URL || 'redis://127.0.0.1:6379/3',\n  };\n\n  const serialPortError = (err) => {\n    console.error(`SerialPort Error: ${err}`);\n  };\n\n  const rabbitmqConnect = await amqplib.connect(config.rabbitmqHost);\n  const rabbitmqChannel = await rabbitmqConnect.createChannel();\n  const redis = createClient(config.redisURL);\n\n  const systemEvents = await SystemEvents(rabbitmqChannel, { consume: false });\n  const systemState = await SystemState(redis, rabbitmqChannel, { consume: false });\n  const systemGPS = await SystemGPS(rabbitmqChannel, { consume: false });\n\n  const usbListener = new UsbSerialPortDeviceLister({\n    filters: [{\n      vendorId: '1546',\n      productId: '01a8',\n    }],\n  });\n\n  const resetGPSState = () => {\n    systemState.set('gps.usb.found', false);\n    systemState.set('gps.usb.connected', false);\n    systemState.set('gps.nav.fix', 'no gps');\n    systemState.set('gps.nav.sats', []);\n    systemState.set('gps.nav.sats.count', 0);\n  };\n\n  const ubxProtocolParser = new UBXProtocolParser();\n  const ubxPacketParser = new UBXPacketParser();\n\n  let previousFix;\n  const parseNavStatus = (packet) => {\n    if (packet.data.gpsFix.string !== previousFix) {\n      previousFix = packet.data.gpsFix.string;\n      systemState.set('gps.nav.fix', previousFix);\n    }\n\n    systemGPS.publish('nav.status', packet);\n  };\n\n  let previousSatCount = 0;\n  const parseNavSat = (packet) => {\n    const connectedSats = packet.data.sats.filter((sat) => {\n      return sat.flags.qualityInd.raw >= 4;\n    });\n\n    if (connectedSats.length !== previousSatCount) {\n      previousSatCount = connectedSats.length;\n\n      const sats = connectedSats.map((sat) => {\n        return {\n          gnss: sat.gnss.string,\n          satelliteId: sat.svId,\n          signalHealth: sat.flags.health.string,\n          signalStrength: sat.cno,\n        };\n      });\n\n      systemState.set('gps.nav.sats', sats);\n      systemState.set('gps.nav.sats.count', previousSatCount);\n    }\n\n    systemGPS.publish('nav.sat', packet);\n  };\n\n  const parseNavPvt = (packet) => {\n    systemGPS.publish('nav.pvt', packet);\n  };\n\n  ubxProtocolParser.pipe(ubxPacketParser);\n\n  ubxPacketParser.on('data', (data) => {\n    switch (data.type) {\n      case 'NAV-STATUS':\n        parseNavStatus(data);\n        break;\n\n      case 'NAV-SAT':\n        parseNavSat(data);\n        break;\n\n      case 'NAV-PVT':\n        parseNavPvt(data);\n        break;\n\n      default:\n        debug(`Received unhandled packet type: \"${data.type}\"`);\n        break;\n    }\n  });\n\n  usbListener.on('attach', (device) => {\n    debug(`GPS Device found at \"${device.comName}\"`);\n    systemEvents.publish('gps.usb.connected', device);\n    systemState.set('gps.usb.found', true);\n\n    const serialPort = new SerialPort(device.comName, {\n      baudRate: 921600,\n      autoOpen: false,\n    });\n\n    serialPort.on('error', (err) => {\n      serialPortError(err);\n    });\n\n    serialPort.open((err) => {\n      if (err) {\n        return serialPortError(err);\n      }\n\n      systemState.set('gps.usb.connected', true);\n\n      return serialPort.pipe(ubxProtocolParser);\n    });\n  });\n\n  usbListener.on('detach', (device) => {\n    debug(`GPS Device disconnected at \"${device.comName}\"`);\n    systemEvents.publish('gps.usb.disconnected', device);\n    resetGPSState();\n  });\n\n  resetGPSState();\n  usbListener.start();\n}\n\nmain().catch(e => console.error(e));\n"],"names":["main","debug","Debug","config","process","env","RABBITMQ_HOST","REDIS_URL","serialPortError","err","error","rabbitmqConnect","amqplib","connect","rabbitmqHost","rabbitmqChannel","createChannel","redis","createClient","redisURL","systemEvents","SystemEvents","systemState","SystemState","systemGPS","SystemGPS","usbListener","UsbSerialPortDeviceLister","resetGPSState","set","ubxProtocolParser","UBXProtocolParser","ubxPacketParser","UBXPacketParser","previousFix","parseNavStatus","packet","data","gpsFix","string","publish","previousSatCount","parseNavSat","connectedSats","sats","filter","sat","flags","qualityInd","raw","length","map","gnss","svId","health","cno","parseNavPvt","pipe","on","type","device","comName","serialPort","SerialPort","open","start","catch","e","console"],"mappings":"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"}